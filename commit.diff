diff --git a/.gitignore b/.gitignore
index c004419..26cfcc1 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,25 +1,88 @@
-*.db
-*.py[co]
+# Byte-compiled / optimized / DLL files
+__pycache__/
+*.py[cod]
+*$py.class
 
-# Packages
+# C extensions
+*.so
+
+# Distribution / packaging
+.Python
+env/
+build/
+develop-eggs/
+dist/
+downloads/
+eggs/
+.eggs/
+lib/
+lib64/
+parts/
+sdist/
+var/
+*.egg-info/
+.installed.cfg
 *.egg
-*.egg-info
-bin
-build
-develop-eggs
-dist
-eggs
-parts
-sdist
-var
+
+# PyInstaller
+#  Usually these files are written by a python script from a template
+#  before PyInstaller builds the exe, so as to inject date/other infos into it.
+*.manifest
+*.spec
 
 # Installer logs
 pip-log.txt
+pip-delete-this-directory.txt
 
 # Unit test / coverage reports
+htmlcov/
+.tox/
 .coverage
-.tox
+.coverage.*
+.cache
+nosetests.xml
+coverage.xml
+*,cover
+.hypothesis/
 
-#Translations
+# Translations
 *.mo
-.idea
\ No newline at end of file
+*.pot
+
+# Django stuff:
+*.log
+local_settings.py
+
+# Flask instance folder
+instance/
+
+# Scrapy stuff:
+.scrapy
+
+# Sphinx documentation
+docs/_build/
+
+# PyBuilder
+target/
+
+# IPython Notebook
+.ipynb_checkpoints
+
+# pyenv
+.python-version
+
+# celery beat schedule file
+celerybeat-schedule
+
+# dotenv
+.env
+
+# virtualenv
+venv/
+ENV/
+
+# Spyder project settings
+.spyderproject
+
+# Rope project settings
+.ropeproject
\ No newline at end of file
diff --git a/docs/source/conf.py b/docs/source/conf.py
index 37ca7bd..ecdd0f4 100644
--- a/docs/source/conf.py
+++ b/docs/source/conf.py
@@ -11,7 +11,8 @@
 # All configuration values have a default; values that are commented out
 # serve to show the default.
 
-import sys, os
+import sys
+import os
 
 # If extensions (or modules to document with autodoc) are in another directory,
 # add these directories to sys.path here. If the directory is relative to the
@@ -23,7 +24,7 @@ sys.path.insert(0, APP_PATH)
 # -- General configuration -----------------------------------------------------
 
 # If your documentation needs a minimal Sphinx version, state it here.
-#needs_sphinx = '1.0'
+# needs_sphinx = '1.0'
 
 # Add any Sphinx extension module names here, as strings. They can be extensions
 # coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
@@ -36,7 +37,7 @@ templates_path = ['_templates']
 source_suffix = '.rst'
 
 # The encoding of source files.
-#source_encoding = 'utf-8-sig'
+# source_encoding = 'utf-8-sig'
 
 # The master toctree document.
 master_doc = 'index'
@@ -56,37 +57,37 @@ release = '1.0'
 
 # The language for content autogenerated by Sphinx. Refer to documentation
 # for a list of supported languages.
-#language = None
+# language = None
 
 # There are two options for replacing |today|: either, you set today to some
 # non-false value, then it is used:
-#today = ''
+# today = ''
 # Else, today_fmt is used as the format for a strftime call.
-#today_fmt = '%B %d, %Y'
+# today_fmt = '%B %d, %Y'
 
 # List of patterns, relative to source directory, that match files and
 # directories to ignore when looking for source files.
 exclude_patterns = []
 
 # The reST default role (used for this markup: `text`) to use for all documents.
-#default_role = None
+# default_role = None
 
 # If true, '()' will be appended to :func: etc. cross-reference text.
-#add_function_parentheses = True
+# add_function_parentheses = True
 
 # If true, the current module name will be prepended to all description
 # unit titles (such as .. function::).
-#add_module_names = True
+# add_module_names = True
 
 # If true, sectionauthor and moduleauthor directives will be shown in the
 # output. They are ignored by default.
-#show_authors = False
+# show_authors = False
 
 # The name of the Pygments (syntax highlighting) style to use.
 pygments_style = 'sphinx'
 
 # A list of ignored prefixes for module index sorting.
-#modindex_common_prefix = []
+# modindex_common_prefix = []
 
 
 # -- Options for HTML output ---------------------------------------------------
@@ -98,26 +99,26 @@ html_theme = 'default'
 # Theme options are theme-specific and customize the look and feel of a theme
 # further.  For a list of options available for each theme, see the
 # documentation.
-#html_theme_options = {}
+# html_theme_options = {}
 
 # Add any paths that contain custom themes here, relative to this directory.
-#html_theme_path = []
+# html_theme_path = []
 
 # The name for this set of Sphinx documents.  If None, it defaults to
 # "<project> v<release> documentation".
-#html_title = None
+# html_title = None
 
 # A shorter title for the navigation bar.  Default is the same as html_title.
-#html_short_title = None
+# html_short_title = None
 
 # The name of an image file (relative to this directory) to place at the top
 # of the sidebar.
-#html_logo = None
+# html_logo = None
 
 # The name of an image file (within the static path) to use as favicon of the
 # docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
 # pixels large.
-#html_favicon = None
+# html_favicon = None
 
 # Add any paths that contain custom static files (such as style sheets) here,
 # relative to this directory. They are copied after the builtin static files,
@@ -126,44 +127,44 @@ html_static_path = ['_static']
 
 # If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
 # using the given strftime format.
-#html_last_updated_fmt = '%b %d, %Y'
+# html_last_updated_fmt = '%b %d, %Y'
 
 # If true, SmartyPants will be used to convert quotes and dashes to
 # typographically correct entities.
-#html_use_smartypants = True
+# html_use_smartypants = True
 
 # Custom sidebar templates, maps document names to template names.
-#html_sidebars = {}
+# html_sidebars = {}
 
 # Additional templates that should be rendered to pages, maps page names to
 # template names.
-#html_additional_pages = {}
+# html_additional_pages = {}
 
 # If false, no module index is generated.
-#html_domain_indices = True
+# html_domain_indices = True
 
 # If false, no index is generated.
-#html_use_index = True
+# html_use_index = True
 
 # If true, the index is split into individual pages for each letter.
-#html_split_index = False
+# html_split_index = False
 
 # If true, links to the reST sources are added to the pages.
-#html_show_sourcelink = True
+# html_show_sourcelink = True
 
 # If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
-#html_show_sphinx = True
+# html_show_sphinx = True
 
 # If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
-#html_show_copyright = True
+# html_show_copyright = True
 
 # If true, an OpenSearch description file will be output, and all pages will
 # contain a <link> tag referring to it.  The value of this option must be the
 # base URL from which the finished HTML is served.
-#html_use_opensearch = ''
+# html_use_opensearch = ''
 
 # This is the file name suffix for HTML files (e.g. ".xhtml").
-#html_file_suffix = None
+# html_file_suffix = None
 
 # Output file base name for HTML help builder.
 htmlhelp_basename = 'django-feedmapperdoc'
@@ -172,40 +173,40 @@ htmlhelp_basename = 'django-feedmapperdoc'
 # -- Options for LaTeX output --------------------------------------------------
 
 # The paper size ('letter' or 'a4').
-#latex_paper_size = 'letter'
+# latex_paper_size = 'letter'
 
 # The font size ('10pt', '11pt' or '12pt').
-#latex_font_size = '10pt'
+# latex_font_size = '10pt'
 
 # Grouping the document tree into LaTeX files. List of tuples
 # (source start file, target name, title, author, documentclass [howto/manual]).
 latex_documents = [
-  ('index', 'django-feedmapper.tex', u'django-feedmapper Documentation',
-   u'National Geographic', 'manual'),
+    ('index', 'django-feedmapper.tex', u'django-feedmapper Documentation',
+     u'National Geographic', 'manual'),
 ]
 
 # The name of an image file (relative to this directory) to place at the top of
 # the title page.
-#latex_logo = None
+# latex_logo = None
 
 # For "manual" documents, if this is true, then toplevel headings are parts,
 # not chapters.
-#latex_use_parts = False
+# latex_use_parts = False
 
 # If true, show page references after internal links.
-#latex_show_pagerefs = False
+# latex_show_pagerefs = False
 
 # If true, show URL addresses after external links.
-#latex_show_urls = False
+# latex_show_urls = False
 
 # Additional stuff for the LaTeX preamble.
-#latex_preamble = ''
+# latex_preamble = ''
 
 # Documents to append as an appendix to all manuals.
-#latex_appendices = []
+# latex_appendices = []
 
 # If false, no module index is generated.
-#latex_domain_indices = True
+# latex_domain_indices = True
 
 
 # -- Options for manual page output --------------------------------------------
diff --git a/example/manage.py b/example/manage.py
index 3e4eedc..f9726f9 100755
--- a/example/manage.py
+++ b/example/manage.py
@@ -1,14 +1,10 @@
 #!/usr/bin/env python
-from django.core.management import execute_manager
-import imp
-try:
-    imp.find_module('settings') # Assumed to be in the same directory.
-except ImportError:
-    import sys
-    sys.stderr.write("Error: Can't find the file 'settings.py' in the directory containing %r. It appears you've customized things.\nYou'll have to run django-admin.py, passing it your settings module.\n" % __file__)
-    sys.exit(1)
-
-import settings
+import os
+import sys
 
 if __name__ == "__main__":
-    execute_manager(settings)
+    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "settings")
+
+    from django.core.management import execute_from_command_line
+
+    execute_from_command_line(sys.argv)
diff --git a/example/myapp/fixtures/initial_data.json b/example/myapp/fixtures/initial_data.json
index c4e35d7..eca9c3f 100644
--- a/example/myapp/fixtures/initial_data.json
+++ b/example/myapp/fixtures/initial_data.json
@@ -1,26 +1,26 @@
 [
     {
-        "pk": 1, 
-        "model": "feedmapper.mapping", 
+        "pk": 1,
+        "model": "feedmapper.mapping",
         "fields": {
-            "purge": true, 
-            "source": "http://www.huffingtonpost.com/feeds/verticals/politics/index.xml", 
-            "parser": "feedmapper.parsers.AtomParser", 
+            "purge": true,
+            "source": "http://www.huffingtonpost.com/feeds/verticals/politics/index.xml",
+            "parser": "feedmapper.parsers.AtomParser",
             "data_map": {
                 "models": {
                     "myapp.Thing": {
-                        "nodePath": "atom:entry", 
-                        "identifier": "atom:id", 
+                        "nodePath": "channel.item",
+                        "identifier": "title",
                         "fields": {
-                            "content": "atom:content", 
-                            "atom_id": "atom:id", 
-                            "title": "atom:title", 
-                            "link": "atom:link.@href", 
-                            "summary": "atom:summary"
+                            "content": "description",
+                            "atom_id": "title",
+                            "title": "title",
+                            "link": "link",
+                            "summary": "title"
                         }
                     }
                 }
-            }, 
+            },
             "label": "Huffington Post Politics"
         }
     }
diff --git a/example/myapp/migrations/0001_initial.py b/example/myapp/migrations/0001_initial.py
new file mode 100644
index 0000000..3c13497
--- /dev/null
+++ b/example/myapp/migrations/0001_initial.py
@@ -0,0 +1,25 @@
+# coding: utf-8
+from __future__ import unicode_literals
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='Thing',
+            fields=[
+                ('atom_id', models.CharField(max_length=255, primary_key=True, serialize=False)),
+                ('title', models.CharField(max_length=255)),
+                ('link', models.URLField(blank=True, null=True)),
+                ('summary', models.TextField()),
+                ('content', models.TextField()),
+            ],
+        ),
+    ]
diff --git a/example/myapp/migrations/0002_load_intial_data.py b/example/myapp/migrations/0002_load_intial_data.py
new file mode 100644
index 0000000..c3a53ff
--- /dev/null
+++ b/example/myapp/migrations/0002_load_intial_data.py
@@ -0,0 +1,33 @@
+# coding: utf-8
+from __future__ import unicode_literals, absolute_import
+from os import path
+
+from django.core.management import call_command
+from django.db import migrations
+
+
+fixture_filename = 'initial_data.json'
+fixture_dir = path.abspath(path.join(
+    path.dirname(path.dirname(__file__)),
+    'fixtures'
+))
+
+
+def load_fixture(apps, schema_editor):
+    fixture_file = path.join(fixture_dir, fixture_filename)
+    call_command('loaddata', fixture_file)
+
+
+def unload_fixture(apps, schema_editor):
+    Thing = apps.get_model("myapp", "Thing")
+    Thing.objects.all().delete()
+
+
+class Migration(migrations.Migration):
+    dependencies = [
+        ('myapp', '0001_initial'),
+    ]
+
+    operations = [
+        migrations.RunPython(load_fixture, reverse_code=unload_fixture),
+    ]
diff --git a/example/myapp/migrations/__init__.py b/example/myapp/migrations/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/example/myapp/models.py b/example/myapp/models.py
index 8d9a4fa..2aeb9cd 100644
--- a/example/myapp/models.py
+++ b/example/myapp/models.py
@@ -1,6 +1,10 @@
+# coding: utf-8
+from __future__ import unicode_literals, absolute_import
 from django.db import models
+from django.utils.encoding import python_2_unicode_compatible
 
 
+@python_2_unicode_compatible
 class Thing(models.Model):
     """
     A sample thing that will hold stuff. If you want to try this out, add a new
@@ -25,9 +29,9 @@ class Thing(models.Model):
     """
     atom_id = models.CharField(max_length=255, primary_key=True)
     title = models.CharField(max_length=255)
-    link = models.URLField(blank=True, null=True, verify_exists=False)
+    link = models.URLField(blank=True, null=True)
     summary = models.TextField()
     content = models.TextField()
 
-    def __unicode__(self):
+    def __str__(self):
         return self.title
diff --git a/example/settings.py b/example/settings.py
index ae35f0f..7f4747b 100644
--- a/example/settings.py
+++ b/example/settings.py
@@ -1,161 +1,79 @@
 import os
 import sys
 
-PROJECT_ROOT = os.path.abspath(os.path.dirname(__file__))
-APP = os.path.abspath(os.path.join(PROJECT_ROOT, '..'))
-sys.path.append(APP)
+BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
+sys.path.append(os.path.abspath(os.path.join(BASE_DIR, '..')))
 
+SECRET_KEY = '450+3ja-@nt@nsyr-%w+#bbai9wiwkq5_j$sd_koj)q1fl=8$f'
 DEBUG = True
-TEMPLATE_DEBUG = DEBUG
 
-ADMINS = (
-    # ('Your Name', 'your_email@example.com'),
-)
+ALLOWED_HOSTS = []
 
-MANAGERS = ADMINS
 
-# This is just for our tox tests, which run Django 1.1.x
-DATABASE_ENGINE = 'django.db.backends.sqlite3'
-DATABASE_NAME = 'dev.db'
-
-DATABASES = {
-    'default': {
-        'ENGINE': 'django.db.backends.sqlite3',
-        'NAME': 'dev.db',
-        'USER': '',
-        'PASSWORD': '',
-        'HOST': '',
-        'PORT': '',
-    }
-}
-
-# Local time zone for this installation. Choices can be found here:
-# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name
-# although not all choices may be available on all operating systems.
-# On Unix systems, a value of None will cause Django to use the same
-# timezone as the operating system.
-# If running in a Windows environment this must be set to the same as your
-# system time zone.
-TIME_ZONE = 'America/Chicago'
-
-# Language code for this installation. All choices can be found here:
-# http://www.i18nguy.com/unicode/language-identifiers.html
-LANGUAGE_CODE = 'en-us'
-
-SITE_ID = 1
-
-# If you set this to False, Django will make some optimizations so as not
-# to load the internationalization machinery.
-USE_I18N = True
-
-# If you set this to False, Django will not format dates, numbers and
-# calendars according to the current locale
-USE_L10N = True
-
-# Absolute filesystem path to the directory that will hold user-uploaded files.
-# Example: "/home/media/media.lawrence.com/media/"
-MEDIA_ROOT = ''
-
-# URL that handles the media served from MEDIA_ROOT. Make sure to use a
-# trailing slash.
-# Examples: "http://media.lawrence.com/media/", "http://example.com/media/"
-MEDIA_URL = ''
-
-# Absolute path to the directory static files should be collected to.
-# Don't put anything in this directory yourself; store your static files
-# in apps' "static/" subdirectories and in STATICFILES_DIRS.
-# Example: "/home/media/media.lawrence.com/static/"
-STATIC_ROOT = ''
+# Application definition
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
 
-# URL prefix for static files.
-# Example: "http://media.lawrence.com/static/"
-STATIC_URL = '/static/'
+    'feedmapper',
+    'example.myapp',
+]
 
-# URL prefix for admin static files -- CSS, JavaScript and images.
-# Make sure to use a trailing slash.
-# Examples: "http://foo.com/static/admin/", "/static/admin/".
-ADMIN_MEDIA_PREFIX = '/static/admin/'
-
-# Additional locations of static files
-STATICFILES_DIRS = (
-    # Put strings here, like "/home/html/static" or "C:/www/django/static".
-    # Always use forward slashes, even on Windows.
-    # Don't forget to use absolute paths, not relative paths.
-)
-
-# List of finder classes that know how to find static files in
-# various locations.
-STATICFILES_FINDERS = (
-    'django.contrib.staticfiles.finders.FileSystemFinder',
-    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
-#    'django.contrib.staticfiles.finders.DefaultStorageFinder',
-)
-
-# Make this unique, and don't share it with anybody.
-SECRET_KEY = '2mv9b889qy)*mf+0%m3c0miaf!$@wu2t2yo+u83cp!6+4$!_!7'
-
-# List of callables that know how to import templates from various sources.
-TEMPLATE_LOADERS = (
-    'django.template.loaders.filesystem.Loader',
-    'django.template.loaders.app_directories.Loader',
-#     'django.template.loaders.eggs.Loader',
-)
-
-MIDDLEWARE_CLASSES = (
-    'django.middleware.common.CommonMiddleware',
+MIDDLEWARE_CLASSES = [
+    'django.middleware.security.SecurityMiddleware',
     'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
     'django.middleware.csrf.CsrfViewMiddleware',
     'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
     'django.contrib.messages.middleware.MessageMiddleware',
-)
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+]
 
 ROOT_URLCONF = 'example.urls'
 
-TEMPLATE_DIRS = (
-    # Put strings here, like "/home/html/django_templates" or "C:/www/django/templates".
-    # Always use forward slashes, even on Windows.
-    # Don't forget to use absolute paths, not relative paths.
-)
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
 
-INSTALLED_APPS = (
-    'django.contrib.auth',
-    'django.contrib.contenttypes',
-    'django.contrib.sessions',
-    'django.contrib.sites',
-    #'django.contrib.messages',
-    #'django.contrib.staticfiles',
-    'django.contrib.admin',
-    'django.contrib.admindocs',
+WSGI_APPLICATION = 'wsgi.application'
 
-    'feedmapper',
-    'example.myapp',
-)
-
-# A sample logging configuration. The only tangible logging
-# performed by this configuration is to send an email to
-# the site admins on every HTTP 500 error.
-# See http://docs.djangoproject.com/en/dev/topics/logging for
-# more details on how to customize your logging configuration.
-LOGGING = {
-    'version': 1,
-    'disable_existing_loggers': False,
-    'handlers': {
-        'mail_admins': {
-            'level': 'ERROR',
-            'class': 'django.utils.log.AdminEmailHandler'
-        }
-    },
-    'loggers': {
-        'django.request': {
-            'handlers': ['mail_admins'],
-            'level': 'ERROR',
-            'propagate': True,
-        },
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
     }
 }
 
+
+LANGUAGE_CODE = 'en-us'
+TIME_ZONE = 'UTC'
+USE_I18N = True
+USE_L10N = True
+USE_TZ = True
+
+STATIC_URL = '/static/'
+
 EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
 
 FEEDMAPPER = {
-    'DATA_DIR': os.path.abspath(os.path.join(PROJECT_ROOT, '../feedmapper/tests/'))
+    'DATA_DIR': os.path.abspath(os.path.join(
+        BASE_DIR, '..', 'feedmapper', 'tests')
+    )
 }
diff --git a/example/urls.py b/example/urls.py
index 6a6bd59..fd2b2a7 100644
--- a/example/urls.py
+++ b/example/urls.py
@@ -1,13 +1,8 @@
-from django.conf.urls.defaults import patterns, include, url
-from django.contrib.staticfiles.urls import staticfiles_urlpatterns
+from django.conf.urls import include, url
 
 from django.contrib import admin
 admin.autodiscover()
 
-urlpatterns = patterns('',
-    url(r'^feedmapper/', include('feedmapper.urls')),
-    url(r'^admin/doc/', include('django.contrib.admindocs.urls')),
-    url(r'^admin/', include(admin.site.urls)),
-)
-
-urlpatterns += staticfiles_urlpatterns()
+urlpatterns = [
+    url(r'^', include(admin.site.urls)),
+]
diff --git a/example/wsgi.py b/example/wsgi.py
new file mode 100644
index 0000000..4aa749a
--- /dev/null
+++ b/example/wsgi.py
@@ -0,0 +1,7 @@
+import os
+
+from django.core.wsgi import get_wsgi_application
+
+os.environ.setdefault("DJANGO_SETTINGS_MODULE", "settings")
+
+application = get_wsgi_application()
diff --git a/feedmapper/__init__.py b/feedmapper/__init__.py
index c002c08..b134f4a 100644
--- a/feedmapper/__init__.py
+++ b/feedmapper/__init__.py
@@ -9,6 +9,7 @@ __version_info__ = {
     'serial': 0
 }
 
+
 def get_version():
     """
     Return the formatted version information
@@ -21,5 +22,5 @@ def get_version():
         vers.append('%(releaselevel)s%(serial)i' % __version_info__)
     return ''.join(vers)
 
-__version__ = get_version()
 
+__version__ = get_version()
diff --git a/feedmapper/apps.py b/feedmapper/apps.py
new file mode 100644
index 0000000..44e520d
--- /dev/null
+++ b/feedmapper/apps.py
@@ -0,0 +1,10 @@
+# coding: utf-8
+from __future__ import unicode_literals, absolute_import
+
+from django.apps import AppConfig
+from django.utils.translation import ugettext_lazy as _
+
+
+class DebugToolbarConfig(AppConfig):
+    name = 'feedmapper'
+    verbose_name = _("Feedmapper")
diff --git a/feedmapper/fields.py b/feedmapper/fields.py
deleted file mode 100644
index 61c2b81..0000000
--- a/feedmapper/fields.py
+++ /dev/null
@@ -1,91 +0,0 @@
-"""
-JSONField automatically serializes most Python terms to JSON data.
-Creates a TEXT field with a default value of "{}".  See test_json.py for
-more information.
-
- from django.db import models
- from django_extensions.db.fields import json
-
- class LOL(models.Model):
-     extra = json.JSONField()
-"""
-
-import datetime
-import json
-from decimal import Decimal
-from django.db import models
-from django.conf import settings
-
-
-class JSONEncoder(json.JSONEncoder):
-    def default(self, obj):
-        if isinstance(obj, Decimal):
-            return str(obj)
-        elif isinstance(obj, datetime.datetime):
-            assert settings.TIME_ZONE == 'UTC'
-            return obj.strftime('%Y-%m-%dT%H:%M:%SZ')
-        return json.JSONEncoder.default(self, obj)
-
-
-def dumps(value):
-    assert isinstance(value, dict)
-    return JSONEncoder(indent=4).encode(value)
-
-
-def loads(txt):
-    value = json.loads(
-        txt,
-        parse_float=Decimal,
-        encoding=settings.DEFAULT_CHARSET
-    )
-    assert isinstance(value, dict)
-    return value
-
-
-class JSONDict(dict):
-    """
-    Hack so repr() called by dumpdata will output JSON instead of
-    Python formatted data.  This way fixtures will work!
-    """
-    def __repr__(self):
-        return dumps(self)
-
-
-class JSONField(models.TextField):
-    """JSONField is a generic textfield that neatly serializes/unserializes
-    JSON objects seamlessly.  Main thingy must be a dict object."""
-
-    # Used so to_python() is called
-    __metaclass__ = models.SubfieldBase
-
-    def __init__(self, *args, **kwargs):
-        if 'default' not in kwargs:
-            kwargs['default'] = '{}'
-        models.TextField.__init__(self, *args, **kwargs)
-
-    def to_python(self, value):
-        """Convert our string value to JSON after we load it from the DB"""
-        if not value:
-            return {}
-        elif isinstance(value, basestring):
-            res = loads(value)
-            assert isinstance(res, dict)
-            return JSONDict(**res)
-        else:
-            return value
-
-    def get_db_prep_save(self, value, connection=None):
-        """Convert our JSON object to a string before we save"""
-        if not value:
-            return super(JSONField, self).get_db_prep_save("", connection)
-        else:
-            return super(JSONField, self).get_db_prep_save(dumps(value), connection)
-
-    def south_field_triple(self):
-        "Returns a suitable description of this field for South."
-        # We'll just introspect the _actual_ field.
-        from south.modelsinspector import introspector
-        field_class = "django.db.models.fields.TextField"
-        args, kwargs = introspector(self)
-        # That's our definition!
-        return (field_class, args, kwargs)
diff --git a/feedmapper/fixtures/test_data.json b/feedmapper/fixtures/test_data.json
index 71670d5..9d5dd9e 100644
--- a/feedmapper/fixtures/test_data.json
+++ b/feedmapper/fixtures/test_data.json
@@ -1,18 +1,18 @@
 [
     {
-        "pk": 1, 
-        "model": "feedmapper.mapping", 
+        "pk": 1,
+        "model": "feedmapper.mapping",
         "fields": {
-            "source": "REPLACED IN TESTS", 
-            "parser": "feedmapper.parsers.XMLParser", 
+            "source": "REPLACED IN TESTS",
+            "parser": "feedmapper.parsers.XMLParser",
             "data_map": {
                 "models": {
-                    "feedmapper.Thing": {
+                    "tests.Thing": {
                         "fields": {
                             "id": "id",
                             "combined": ["email", "first_name", "last_name"],
-                            "email": "email", 
-                            "nick": "username.@nick", 
+                            "email": "email",
+                            "nick": "username.@nick",
                             "name": {
                               "transformer": "convert_name",
                               "fields": ["first_name", "last_name"]
@@ -26,40 +26,40 @@
                         "nodePath": "users.user"
                     }
                 }
-            }, 
-            "purge": false, 
+            },
+            "purge": false,
             "label": "Clean mapping"
         }
     },
     {
-        "pk": 2, 
-        "model": "feedmapper.mapping", 
+        "pk": 2,
+        "model": "feedmapper.mapping",
         "fields": {
-            "source": "REPLACED IN TESTS", 
-            "parser": "feedmapper.parsers.XMLParser", 
+            "source": "REPLACED IN TESTS",
+            "parser": "feedmapper.parsers.XMLParser",
             "data_map": {
                 "models": {
-                    "feedmapper.Thing": {
+                    "tests.Thing": {
                         "fields": {
                             "email": "email"
                         },
                         "nodePath": "users.user"
                     }
                 }
-            }, 
-            "purge": false, 
+            },
+            "purge": false,
             "label": "Exception raising mapping"
         }
     },
     {
-        "pk": 3, 
-        "model": "feedmapper.mapping", 
+        "pk": 3,
+        "model": "feedmapper.mapping",
         "fields": {
-            "source": "REPLACED IN TESTS", 
-            "parser": "feedmapper.parsers.AtomParser", 
+            "source": "REPLACED IN TESTS",
+            "parser": "feedmapper.parsers.AtomParser",
             "data_map": {
                 "models": {
-                    "feedmapper.AtomEntry": {
+                    "tests.AtomEntry": {
                         "fields": {
                             "atom_id": "id",
                             "title": "title"
@@ -68,8 +68,8 @@
                         "nodePath": "entry"
                     }
                 }
-            }, 
-            "purge": false, 
+            },
+            "purge": false,
             "label": "Rich Testing"
         }
     }
diff --git a/feedmapper/migrations/0001_initial.py b/feedmapper/migrations/0001_initial.py
index 5ac145e..fbd324b 100644
--- a/feedmapper/migrations/0001_initial.py
+++ b/feedmapper/migrations/0001_initial.py
@@ -1,49 +1,31 @@
-# encoding: utf-8
-import datetime
-from south.db import db
-from south.v2 import SchemaMigration
-from django.db import models
+# coding: utf-8
+from __future__ import unicode_literals
 
-class Migration(SchemaMigration):
+from django.db import migrations, models
+import jsonfield.fields
 
-    def forwards(self, orm):
-        
-        # Adding model 'Mapping'
-        db.create_table('feedmapper_mapping', (
-            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
-            ('label', self.gf('django.db.models.fields.CharField')(max_length=255)),
-            ('source', self.gf('django.db.models.fields.CharField')(max_length=255)),
-            ('parser', self.gf('django.db.models.fields.CharField')(max_length=255)),
-            ('purge', self.gf('django.db.models.fields.BooleanField')(default=False)),
-            ('data_map', self.gf('django.db.models.fields.TextField')(default='{}')),
-            ('notification_recipients', self.gf('django.db.models.fields.TextField')(blank=True)),
-            ('parse_attempted', self.gf('django.db.models.fields.DateTimeField')(null=True, blank=True)),
-            ('parse_succeeded', self.gf('django.db.models.fields.BooleanField')(default=False)),
-            ('parse_log', self.gf('django.db.models.fields.TextField')(blank=True)),
-        ))
-        db.send_create_signal('feedmapper', ['Mapping'])
 
+class Migration(migrations.Migration):
 
-    def backwards(self, orm):
-        
-        # Deleting model 'Mapping'
-        db.delete_table('feedmapper_mapping')
+    initial = True
 
+    dependencies = [
+    ]
 
-    models = {
-        'feedmapper.mapping': {
-            'Meta': {'object_name': 'Mapping'},
-            'data_map': ('django.db.models.fields.TextField', [], {'default': "'{}'"}),
-            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
-            'label': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
-            'notification_recipients': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
-            'parse_attempted': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
-            'parse_log': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
-            'parse_succeeded': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
-            'parser': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
-            'purge': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
-            'source': ('django.db.models.fields.CharField', [], {'max_length': '255'})
-        }
-    }
-
-    complete_apps = ['feedmapper']
+    operations = [
+        migrations.CreateModel(
+            name='Mapping',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('label', models.CharField(help_text='Label for your reference', max_length=255, verbose_name='label')),
+                ('source', models.CharField(help_text='The source feed for your data', max_length=255, verbose_name='source')),
+                ('parser', models.CharField(choices=[('feedmapper.parsers.AtomParser', 'Atom'), ('feedmapper.parsers.XMLParser', 'XML')], help_text='Which parser to use when synchronizing', max_length=255, verbose_name='parser')),
+                ('purge', models.BooleanField(default=False, help_text='Purge existing items on sync?', verbose_name='purge')),
+                ('data_map', jsonfield.fields.JSONField(verbose_name='data map')),
+                ('notification_recipients', models.TextField(blank=True, help_text='Specify one email address per line to be notified of parsing errors.', verbose_name='notification recipients')),
+                ('parse_attempted', models.DateTimeField(blank=True, null=True, verbose_name='parse attempted')),
+                ('parse_succeeded', models.BooleanField(default=False, verbose_name='parse succeeded')),
+                ('parse_log', models.TextField(blank=True, verbose_name='parse log')),
+            ],
+        ),
+    ]
diff --git a/feedmapper/models.py b/feedmapper/models.py
index 04503fd..44485a4 100644
--- a/feedmapper/models.py
+++ b/feedmapper/models.py
@@ -1,13 +1,15 @@
 from django.conf import settings
 from django.db import models
 from django.utils.translation import ugettext_lazy as _
+from jsonfield import JSONField
 
-from .fields import JSONField
 from .settings import FEEDMAPPER
 
 
 class Mapping(models.Model):
-    "Represents a mapping of model fields to feed nodes or attributes."
+    """
+    Represents a mapping of model fields to feed nodes or attributes.
+    """
     label = models.CharField(_("label"), max_length=255, help_text=_("Label for your reference"))
     source = models.CharField(_("source"), max_length=255, help_text=_("The source feed for your data"))
     parser = models.CharField(_("parser"), max_length=255, choices=FEEDMAPPER['PARSER_CHOICES'], help_text=_("Which parser to use when synchronizing"))
@@ -22,7 +24,9 @@ class Mapping(models.Model):
         return self.label
 
     def parse(self):
-        "Dynamically pull in this mapping's parser and parse the mapping."
+        """
+        Dynamically pull in this mapping's parser and parse the mapping.
+        """
         module_path, parser_class = self.parser.rsplit('.', 1)
         module = __import__(module_path, fromlist=[parser_class])
         parser_class = getattr(module, parser_class)
@@ -31,7 +35,9 @@ class Mapping(models.Model):
 
     if 'djcelery' in settings.INSTALLED_APPS:
         def save(self, *args, **kwargs):
-            "Create or update a django-celery periodic task for this mapping."
+            """
+            Create or update a django-celery periodic task for this mapping.
+            """
             super(Mapping, self).save(*args, **kwargs)
             from djcelery.models import CrontabSchedule, PeriodicTask
             crontab, created = CrontabSchedule.objects.get_or_create(minute='0', hour='*', day_of_week='*')
diff --git a/feedmapper/parsers.py b/feedmapper/parsers.py
index 15701a4..50e1617 100644
--- a/feedmapper/parsers.py
+++ b/feedmapper/parsers.py
@@ -1,10 +1,14 @@
+# coding: utf-8
+from __future__ import unicode_literals, absolute_import
 import os
 from datetime import datetime
+
 from lxml import etree
 
 from django.conf import settings
 from django.core.mail import send_mail
-from django.db.models import get_model
+from django.utils import six
+from django.apps import apps
 from django.template.loader import render_to_string
 
 from .settings import FEEDMAPPER
@@ -30,7 +34,7 @@ class Parser(object):
 
     @property
     def data_source(self):
-        if not self.mapping.source.startswith('/') and not '://' in self.mapping.source:
+        if not self.mapping.source.startswith('/') and '://' not in self.mapping.source:
             return os.path.join(self.data_dir, self.mapping.source)
         return self.mapping.source
 
@@ -38,15 +42,17 @@ class Parser(object):
         """
         Validate that a model in the JSON mapping is in the format app.model.
         """
-        if not '.' in model_string or model_string.count('.') > 1:
+        if '.' not in model_string or model_string.count('.') > 1:
             return False
         return True
 
     def generate_filter_kwargs(self, filter_string):
         """
         Convert a string to kwargs that can be passed to the Django ORM's filter
-        method. For example, 'slug__icontains="darth", name="Anakin"' will get
-        converted to {'slug__icontains': 'darth', 'name': 'Anakin'}.
+        method.
+
+        >>> Parser(None).generate_filter_kwargs('slug__icontains="darth", name="Anakin"')
+        {'slug__icontains': 'darth', 'name': 'Anakin'}
         """
         filters = filter_string.replace('"', '').replace("'", '').split(',')
         filter_kwargs = dict([str(filter).strip().split('=') for filter in filters])
@@ -144,7 +150,7 @@ class XMLParser(Parser):
 
                 if not identifier and not self.mapping.purge:
                     raise UserWarning("Purging is off and the JSON mapping doesn't supply an identifier.")
-                model = get_model(*model_string.split('.'))
+                model = apps.get_model(*model_string.split('.'))
                 node_path = configuration['nodePath'].replace('.', '/')
                 fields = configuration['fields']
                 nodes = root.xpath(node_path, namespaces=self.nsmap)
@@ -168,6 +174,7 @@ class XMLParser(Parser):
                             identifier_value = getattr(model, identifier_transformer)(identifier_value, parser=self)
 
                         kwargs = {identifier: identifier_value}
+                        # TODO: get_or_create
                         try:
                             instance = model.objects.get(**kwargs)
                         except model.DoesNotExist:
@@ -179,19 +186,22 @@ class XMLParser(Parser):
                         transformer = getattr(instance, "parse_%s" % field, None)
 
                         if not transformer:
-                            if isinstance(target, basestring):
+                            if isinstance(target, six.string_types):
                                 # maps one model field to one feed node
                                 value = self.get_value(node, target)
                             elif isinstance(target, list):
                                 # maps one model field to multiple feed nodes
                                 value = self.join_fields(node, target)
 
-                        elif transformer or isinstance(target, dict):
+                        if transformer or isinstance(target, dict):
                             # we may have a transformer (parse_fieldname method) or an extended definition
                             value = None
                             if 'transformer' in target:
                                 # maps one model field to a transformer method
                                 transformer = getattr(instance, target['transformer'])
+                            elif 'default' in target and not value:
+                                # maps one model field to a default value
+                                value = target['default']
                             else:
                                 # we've got a single field definition with an implicit transformer
                                 target = {"fields": [target]}
@@ -219,11 +229,11 @@ class XMLParser(Parser):
                                     )
                                     continue
                                 else:
-                                    value = transformer(*transformer_args, parser=self)
+                                    try:
+                                        value = transformer(*transformer_args, parser=self)
+                                    except TypeError:
+                                        value = transformer(*transformer_args)
 
-                            if 'default' in target and not value:
-                                # maps one model field to a default value
-                                value = target['default']
                         setattr(instance, field, value)
                     instance.save()
 
@@ -255,4 +265,4 @@ class AtomParser(XMLParser):
 
     def __init__(self, mapping):
         super(AtomParser, self).__init__(mapping)
-        self.nsmap.update({'atom': 'http://www.w3.org/2005/Atom'})
\ No newline at end of file
+        self.nsmap.update({'atom': 'http://www.w3.org/2005/Atom'})
diff --git a/feedmapper/tasks.py b/feedmapper/tasks.py
index dd95b99..6af3568 100644
--- a/feedmapper/tasks.py
+++ b/feedmapper/tasks.py
@@ -1,3 +1,5 @@
+# coding: utf-8
+from __future__ import unicode_literals, absolute_import
 from celery.task import task
 
 from .models import Mapping
@@ -5,7 +7,9 @@ from .models import Mapping
 
 @task
 def feedmapper_sync(mapping_id):
-    "Grab the requested Mapping and parse it."
+    """
+    Grab the requested Mapping and parse it.
+    """
     try:
         mapping = Mapping.objects.get(pk=mapping_id)
         mapping.parse()
diff --git a/feedmapper/tests/__init__.py b/feedmapper/tests/__init__.py
index e0e7661..7f8fa87 100644
--- a/feedmapper/tests/__init__.py
+++ b/feedmapper/tests/__init__.py
@@ -1,163 +1,2 @@
-import os
-
-from django.db import models
-from django.test import TestCase
-
-from feedmapper.models import Mapping
-from feedmapper.parsers import XMLParser
-
-
-TEST_DIR = os.path.abspath(os.path.dirname(__file__))
-
-
-class AtomEntry(models.Model):
-    "Dummy model for testing an Atom feed."
-    atom_id = models.CharField(max_length=255, primary_key=True)
-    title = models.CharField(max_length=255)
-    subtitle = models.CharField(max_length=255)
-
-
-class Thing(models.Model):
-    "Dummy model for testing."
-    email = models.EmailField()
-    name = models.CharField(max_length=255)
-    nick = models.CharField(max_length=50)
-    combined = models.TextField()
-    other = models.CharField(max_length=50)
-    master = models.CharField(max_length=50)
-
-    def convert_name(self, first_name, last_name):
-        return "%s %s" % (first_name, last_name)
-
-
-class FeedMapperTests(TestCase):
-    fixtures = ['test_data.json']
-
-    def setUp(self):
-        self.mapping = Mapping.objects.get(pk=1)
-        self.mapping.source = os.path.join(TEST_DIR, "dummy1.xml")
-        self.mapping.parse()
-        self.parser = XMLParser(self.mapping)
-
-        self.atom_mapping = Mapping.objects.get(pk=3)
-        self.atom_mapping.source = os.path.join(TEST_DIR, "atom.xml")
-        self.atom_mapping.parse()
-
-    def test_model_format_validation_passes(self):
-        "Ensure that validation passes if JSON mapping models are formatted properly."
-        model_string = 'myapp.MyModel'
-        self.assertTrue(self.parser.validate_model_format(model_string))
-
-    def test_model_format_validation_fails(self):
-        "Ensure that validation fails if JSON mapping models are formatted improperly."
-        model_string = 'myapp.fail.MyModel'
-        self.assertFalse(self.parser.validate_model_format(model_string))
-
-    def test_parse_filter(self):
-        "Ensure that the parse filter returns a properly formatted dictionary."
-        filter_string = 'slug__icontains="darth", name="Anakin"'
-        filter_kwargs = {'slug__icontains': 'darth', 'name': 'Anakin'}
-        self.assertEqual(self.parser.generate_filter_kwargs(filter_string), filter_kwargs)
-
-    def test_parser_one_to_one(self):
-        "Ensure the parser can handle a one-to-one model field to feed node mapping."
-        thing = Thing.objects.get(pk=1)
-        self.assertEqual(thing.email, "vader@sith.org")
-
-    def test_parser_one_to_attribute(self):
-        "Ensure the parser can handle a model field to feed node attribute mapping."
-        thing = Thing.objects.get(pk=1)
-        self.assertEqual(thing.nick, "zeke")
-
-    def test_parser_one_to_many(self):
-        "Ensure the parser can handle a one-to-many model field to feed nodes mapping."
-        thing = Thing.objects.get(pk=1)
-        self.assertEqual(thing.combined, "vader@sith.org Anakin Skywalker")
-
-    def test_parser_one_to_node_text(self):
-        "Ensure the parser can grab the text for the iterable nodes themselves."
-        thing = Thing.objects.get(pk=1)
-        self.assertEqual(thing.master, "My master was Obi-Wan Kenobi.")
-
-    def test_parser_uses_default_value(self):
-        "Ensure the parser uses a default value if necessary."
-        thing = Thing.objects.get(pk=1)
-        self.assertEqual(thing.other, "default value from mapping")
-
-    def test_parser_one_to_transformer(self):
-        "Ensure the parser can handle a custom transformer for a model field."
-        thing = Thing.objects.get(pk=1)
-        self.assertEqual(thing.name, "Anakin Skywalker")
-
-    def test_parser_purges_items(self):
-        "Ensure the parser purges items when purging is enabled."
-        num_things_before = Thing.objects.count()
-        self.mapping.source = os.path.join(TEST_DIR, "dummy2.xml")
-        self.mapping.purge = True
-        self.mapping.parse()
-        num_things_after = Thing.objects.count()
-        self.assertEqual(num_things_before, 2)
-        self.assertEqual(num_things_after, 1)
-
-    def test_parser_updates_items(self):
-        "Ensure the parser updates items when purging is disabled."
-        num_things_before = Thing.objects.count()
-        self.mapping.source = os.path.join(TEST_DIR, "dummy2.xml")
-        self.mapping.parse()
-        num_things_after = Thing.objects.count()
-        self.assertEqual(num_things_before, num_things_after)
-
-    def test_parser_update_impossible(self):
-        "Ensure that a mapping without identifiers and purge turned off fails."
-        mapping = Mapping.objects.get(pk=2)
-        mapping.source = os.path.join(TEST_DIR, "exceptions.xml")
-        self.assertRaises(UserWarning, mapping.parse)
-
-    def test_parser_handles_local_files(self):
-        "Ensure that the parser can handle a local filesystem data source."
-        mapping = Mapping.objects.get(pk=1)
-        mapping.source = "dummy1.xml"
-        mapping.parse()
-        thing = Thing.objects.get(pk=1)
-        self.assertEqual(thing.name, "Anakin Skywalker")
-        self.assertEqual(thing.nick, "zeke")
-        self.assertEqual(thing.email, "vader@sith.org")
-        self.assertEqual(thing.combined, "vader@sith.org Anakin Skywalker")
-
-    def test_parser_handles_urls(self):
-        "Ensure that the parser can handle a remote data source URL."
-        mapping = Mapping.objects.get(pk=1)
-        mapping.source = "http://a.com/notreal.xml"
-        parser = XMLParser(mapping)
-        self.assertEqual(parser.data_source, mapping.source)
-
-    def test_xml_syntax_exception(self):
-        mapping = Mapping.objects.get(pk=1)
-        mapping.source = os.path.join(TEST_DIR, "malformed.xml")
-        mapping.parse()
-        self.assertTrue("FATAL:PARSER:ERR_ATTRIBUTE_NOT_STARTED" in mapping.parse_log)
-        self.assertFalse(mapping.parse_succeeded)
-
-    def test_bad_url_exception(self):
-        mapping = Mapping.objects.get(pk=1)
-        mapping.source = "http://a.com/notreal.xml"
-        mapping.parse()
-        self.assertEqual(mapping.parse_log, u'Error reading file \'http://a.com/notreal.xml\': failed to load external entity "http://a.com/notreal.xml"')
-        self.assertFalse(mapping.parse_succeeded)
-
-    def test_parse_log_clears(self):
-        "Ensure the parse log gets cleared out when parsing succeeds."
-        mapping = Mapping.objects.get(pk=1)
-        mapping.source = "http://a.com/notreal.xml"
-        mapping.parse()
-        self.assertNotEqual(mapping.parse_log, "")
-        self.assertFalse(mapping.parse_succeeded)
-        # now re-parse a good data source and see if the log is clear
-        mapping.source = "dummy1.xml"
-        mapping.parse()
-        self.assertEqual(mapping.parse_log, "")
-        self.assertTrue(mapping.parse_succeeded)
-
-    def tearDown(self):
-        pass
-
+# coding: utf-8
+from __future__ import unicode_literals, absolute_import
diff --git a/feedmapper/tests/models.py b/feedmapper/tests/models.py
new file mode 100644
index 0000000..8a4ab4f
--- /dev/null
+++ b/feedmapper/tests/models.py
@@ -0,0 +1,27 @@
+# coding: utf-8
+from __future__ import unicode_literals, absolute_import
+from django.db import models
+
+
+class AtomEntry(models.Model):
+    """
+    Dummy model for testing an Atom feed.
+    """
+    atom_id = models.CharField(max_length=255, primary_key=True)
+    title = models.CharField(max_length=255)
+    subtitle = models.CharField(max_length=255)
+
+
+class Thing(models.Model):
+    """
+    Dummy model for testing.
+    """
+    email = models.EmailField()
+    name = models.CharField(max_length=255)
+    nick = models.CharField(max_length=50)
+    combined = models.TextField()
+    other = models.CharField(max_length=50)
+    master = models.CharField(max_length=50)
+
+    def convert_name(self, first_name, last_name):
+        return "%s %s" % (first_name, last_name)
diff --git a/feedmapper/tests/tests.py b/feedmapper/tests/tests.py
new file mode 100644
index 0000000..bdccb23
--- /dev/null
+++ b/feedmapper/tests/tests.py
@@ -0,0 +1,184 @@
+# coding: utf-8
+from __future__ import unicode_literals, absolute_import
+import os
+
+from django.test import TestCase
+
+from feedmapper.models import Mapping
+from feedmapper.parsers import XMLParser
+
+from .models import Thing
+
+try:
+    from unittest import mock
+except ImportError:
+    import mock
+
+TEST_DIR = os.path.abspath(os.path.dirname(__file__))
+
+
+class FeedMapperTests(TestCase):
+    fixtures = ['test_data.json']
+
+    def setUp(self):
+        self.mapping = Mapping.objects.get(pk=1)
+        self.mapping.source = os.path.join(TEST_DIR, "dummy1.xml")
+        self.mapping.parse()
+        self.parser = XMLParser(self.mapping)
+
+        self.atom_mapping = Mapping.objects.get(pk=3)
+        self.atom_mapping.source = os.path.join(TEST_DIR, "atom.xml")
+        self.atom_mapping.parse()
+
+    def tearDown(self):
+        pass
+
+    def test_model_format_validation_passes(self):
+        """
+        Ensure that validation passes if JSON mapping models are formatted properly.
+        """
+        model_string = 'myapp.MyModel'
+        self.assertTrue(self.parser.validate_model_format(model_string))
+
+    def test_model_format_validation_fails(self):
+        """
+        Ensure that validation fails if JSON mapping models are formatted improperly.
+        """
+        model_string = 'myapp.fail.MyModel'
+        self.assertFalse(self.parser.validate_model_format(model_string))
+
+    def test_parse_filter(self):
+        """
+        Ensure that the parse filter returns a properly formatted dictionary.
+        """
+        filter_string = 'slug__icontains="darth", name="Anakin"'
+        filter_kwargs = {'slug__icontains': 'darth', 'name': 'Anakin'}
+        self.assertEqual(self.parser.generate_filter_kwargs(filter_string), filter_kwargs)
+
+    def test_parser_one_to_one(self):
+        """
+        Ensure the parser can handle a one-to-one model field to feed node mapping.
+        """
+        thing = Thing.objects.get(pk=1)
+        self.assertEqual(thing.email, "vader@sith.org")
+
+    def test_parser_one_to_attribute(self):
+        """
+        Ensure the parser can handle a model field to feed node attribute mapping.
+        """
+        thing = Thing.objects.get(pk=1)
+        self.assertEqual(thing.nick, "zeke")
+
+    def test_parser_one_to_many(self):
+        """
+        Ensure the parser can handle a one-to-many model field to feed nodes mapping.
+        """
+        thing = Thing.objects.get(pk=1)
+        self.assertEqual(thing.combined, "vader@sith.org Anakin Skywalker")
+
+    def test_parser_one_to_node_text(self):
+        """
+        Ensure the parser can grab the text for the iterable nodes themselves.
+        """
+        thing = Thing.objects.get(pk=1)
+        self.assertEqual(thing.master, "My master was Obi-Wan Kenobi.")
+
+    def test_parser_uses_default_value(self):
+        """
+        Ensure the parser uses a default value if necessary.
+        """
+        thing = Thing.objects.get(pk=1)
+        self.assertEqual(thing.other, "default value from mapping")
+
+    def test_parser_one_to_transformer(self):
+        """
+        Ensure the parser can handle a custom transformer for a model field.
+        """
+        thing = Thing.objects.get(pk=1)
+        self.assertEqual(thing.name, "Anakin Skywalker")
+
+    def test_parser_purges_items(self):
+        """
+        Ensure the parser purges items when purging is enabled.
+        """
+        num_things_before = Thing.objects.count()
+        self.mapping.source = os.path.join(TEST_DIR, "dummy2.xml")
+        self.mapping.purge = True
+        self.mapping.parse()
+        num_things_after = Thing.objects.count()
+        self.assertEqual(num_things_before, 2)
+        self.assertEqual(num_things_after, 1)
+
+    def test_parser_updates_items(self):
+        """
+        Ensure the parser updates items when purging is disabled.
+        """
+        num_things_before = Thing.objects.count()
+        self.mapping.source = os.path.join(TEST_DIR, "dummy2.xml")
+        self.mapping.parse()
+        num_things_after = Thing.objects.count()
+        self.assertEqual(num_things_before, num_things_after)
+
+    def test_parser_update_impossible(self):
+        """
+        Ensure that a mapping without identifiers and purge turned off fails.
+        """
+        mapping = Mapping.objects.get(pk=2)
+        mapping.source = os.path.join(TEST_DIR, "exceptions.xml")
+        self.assertRaises(UserWarning, mapping.parse)
+
+    @mock.patch.dict('feedmapper.parsers.FEEDMAPPER', {'DATA_DIR': TEST_DIR})
+    def test_parser_handles_local_files(self):
+        """
+        Ensure that the parser can handle a local filesystem data source.
+        """
+        mapping = Mapping.objects.get(pk=1)
+        mapping.source = "dummy1.xml"
+        mapping.parse()
+        thing = Thing.objects.get(pk=1)
+        self.assertEqual(thing.name, "Anakin Skywalker")
+        self.assertEqual(thing.nick, "zeke")
+        self.assertEqual(thing.email, "vader@sith.org")
+        self.assertEqual(thing.combined, "vader@sith.org Anakin Skywalker")
+
+    def test_parser_handles_urls(self):
+        """
+        Ensure that the parser can handle a remote data source URL.
+        """
+        mapping = Mapping.objects.get(pk=1)
+        mapping.source = "http://a.com/notreal.xml"
+        parser = XMLParser(mapping)
+        self.assertEqual(parser.data_source, mapping.source)
+
+    def test_xml_syntax_exception(self):
+        mapping = Mapping.objects.get(pk=1)
+        mapping.source = os.path.join(TEST_DIR, "malformed.xml")
+        mapping.parse()
+        self.assertTrue("FATAL:PARSER:ERR_ATTRIBUTE_NOT_STARTED" in mapping.parse_log)
+        self.assertFalse(mapping.parse_succeeded)
+
+    def test_bad_url_exception(self):
+        mapping = Mapping.objects.get(pk=1)
+        mapping.source = "http://a.com/notreal.xml"
+        mapping.parse()
+        self.assertEqual(
+            mapping.parse_log,
+            u'Error reading file \'http://a.com/notreal.xml\': '
+            u'failed to load external entity "http://a.com/notreal.xml"')
+        self.assertFalse(mapping.parse_succeeded)
+
+    @mock.patch.dict('feedmapper.parsers.FEEDMAPPER', {'DATA_DIR': TEST_DIR})
+    def test_parse_log_clears(self):
+        """
+        Ensure the parse log gets cleared out when parsing succeeds.
+        """
+        mapping = Mapping.objects.get(pk=1)
+        mapping.source = "http://a.com/notreal.xml"
+        mapping.parse()
+        self.assertNotEqual(mapping.parse_log, "")
+        self.assertFalse(mapping.parse_succeeded)
+        # now re-parse a good data source and see if the log is clear
+        mapping.source = "dummy1.xml"
+        mapping.parse()
+        self.assertEqual(mapping.parse_log, "")
+        self.assertTrue(mapping.parse_succeeded)
diff --git a/requirements.txt b/requirements.txt
index d0f7034..785e8e5 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -1,2 +1,3 @@
 lxml==3.3.5
+jsonfield==1.0.3
 celery==3.1.17
diff --git a/runtests.py b/runtests.py
new file mode 100644
index 0000000..da9bf7a
--- /dev/null
+++ b/runtests.py
@@ -0,0 +1,49 @@
+#!/usr/bin/env python
+import os
+import sys
+
+from django.conf import settings
+import django
+
+
+DEFAULT_SETTINGS = {
+    "INSTALLED_APPS": (
+        'feedmapper',
+        'feedmapper.tests',
+    ),
+    "DATABASES": {
+        "default": {
+            "ENGINE": "django.db.backends.sqlite3"
+        }
+    },
+    "SILENCED_SYSTEM_CHECKS": ["1_7.W001"],
+}
+
+
+def runtests():
+    if not settings.configured:
+        settings.configure(**DEFAULT_SETTINGS)
+
+    # Compatibility with Django 1.7's stricter initialization
+    if hasattr(django, 'setup'):
+        django.setup()
+
+    parent = os.path.dirname(os.path.abspath(__file__))
+    sys.path.insert(0, parent)
+
+    try:
+        from django.test.runner import DiscoverRunner
+        runner_class = DiscoverRunner
+        test_args = ['feedmapper.tests']
+    except ImportError:
+        from django.test.simple import DjangoTestSuiteRunner
+        runner_class = DjangoTestSuiteRunner
+        test_args = ['tests']
+
+    failures = runner_class(
+        verbosity=1, interactive=True, failfast=False).run_tests(test_args)
+    sys.exit(failures)
+
+
+if __name__ == '__main__':
+    runtests()
diff --git a/setup.py b/setup.py
index 3bed472..d1bf375 100644
--- a/setup.py
+++ b/setup.py
@@ -1,9 +1,25 @@
 import os
 import sys
 from setuptools import setup, find_packages
+from pip.req import parse_requirements
+
+
+def get_requirements():
+    requirements = [
+        str(ir.req) for ir in parse_requirements(
+            os.path.join(os.path.abspath(os.path.dirname(__file__)), 'requirements.txt'),
+            session=False
+        )
+    ]
+    if sys.version_info.major == 2:
+        requirements.append("mock")
+    return requirements
+
 
 def read_file(filename):
-    """Read a file into a string"""
+    """
+    Read a file into a string
+    """
     path = os.path.abspath(os.path.dirname(__file__))
     filepath = os.path.join(path, filename)
     try:
@@ -11,9 +27,12 @@ def read_file(filename):
     except IOError:
         return ''
 
+
 def get_readme():
-    """Return the README file contents. Supports text ,rst, and markdown"""
-    for name in ('README','README.rst','README.md'):
+    """
+    Return the README file contents. Supports text ,rst, and markdown
+    """
+    for name in ('README', 'README.rst', 'README.md'):
         if os.path.exists(name):
             return read_file(name)
     return ''
@@ -23,26 +42,29 @@ __import__('feedmapper')
 DESC = " ".join(sys.modules['feedmapper'].__doc__.splitlines()).strip()
 
 setup(
-    name = "django-feedmapper",
-    version = sys.modules['feedmapper'].get_version().replace(' ', '-'),
-    url = 'https://github.com/natgeo/django-feedmapper',
-    license= 'BSD',
-    author = 'National Geographic',
-    author_email = 'appdev@ngs.org',
-    description = DESC,
-    long_description = get_readme(),
-    packages = find_packages(),
+    name="django-feedmapper",
+    version=sys.modules['feedmapper'].get_version().replace(' ', '-'),
+    url='https://github.com/natgeo/django-feedmapper',
+    license='BSD',
+    author='Alexey Prokoptsev',
+    author_email='aprokoptsev@gmail.com',
+    description=DESC,
+    long_description=get_readme(),
+    packages=find_packages(),
     namespace_packages=[],
-    include_package_data = True,
-    install_requires = read_file('requirements.txt'),
-    classifiers = [
-        'Development Status :: 5 - Production/Stable',
+    include_package_data=True,
+    install_requires=get_requirements(),
+    classifiers=[
         'Environment :: Web Environment',
-        'Intended Audience :: Developers',
         'License :: OSI Approved :: BSD License',
         'Operating System :: OS Independent',
         'Programming Language :: Python',
+        "Programming Language :: Python :: 2.7",
+        "Programming Language :: Python :: 3.4",
         'Framework :: Django',
+        'Framework :: Django :: 1.7',
+        'Framework :: Django :: 1.8',
+        'Framework :: Django :: 1.9',
     ],
+    test_suite='runtests.runtests',
 )
-
diff --git a/tox.ini b/tox.ini
index 1a98edc..11d8544 100644
--- a/tox.ini
+++ b/tox.ini
@@ -1,42 +1,16 @@
 [tox]
 envlist =
-    py27-django13,
-    py27-django12,
-    py27-django11,
-    py26-django13,
-    py26-django12,
-    py26-django11
+    py{27,34}-django{17,18,19},
 
 [testenv]
-changedir = example
-commands = python manage.py test feedmapper
+basepython =
+    py27: python2.7
+    py34: python3.4
 
-[testenv:py26-django13]
 deps =
-    django==1.3
-    lxml==2.3
+    coverage == 3.6
+    django17: Django>=1.7,<1.8
+    django18: Django>=1.8,<1.9
+    django19: Django>=1.9,<1.10
 
-[testenv:py26-django12]
-deps =
-    django==1.2.5
-    lxml==2.3
-
-[testenv:py26-django11]
-deps =
-    django==1.1.4
-    lxml==2.3
-
-[testenv:py27-django13]
-deps =
-    django==1.3
-    lxml==2.3
-
-[testenv:py27-django12]
-deps =
-    django==1.2.5
-    lxml==2.3
-
-[testenv:py27-django11]
-deps =
-    django==1.1.4
-    lxml==2.3
+commands = coverage run -a setup.py test
\ No newline at end of file
